#+Title: Experimento del efecto fotovolt√°ico
#+Author: Diego Berrocal Chinchay
#+Subtitle: 20102547C
#+Options: toc:nil ^:nil

* Le_ notes taken for Photo Voltaic Effect Experiment

** Diode Modeling Formula
hleo <kbd>hey</kbd>
It's know that the formula that renders this correctly is the Shockley formula
[[https://www.wikiwand.com/en/Diode_modelling][Here you can read more about it]].
[[file:img/shockley.png]]

#+begin_src python :noweb-ref IvsV
  import numpy as np
  def IvsV(t, Is, n):
      return Is * np.exp(t) / n
#+end_src

#+RESULTS:
: None

#+begin_src python :noweb-ref test-func
  import numpy as np
  def test_func(x, p1, p2):
    return p1*np.cos(p2*x) + p2*np.sin(p1*x)
#+end_src
** Results of formula
#+begin_src python :noweb yes :results file :exports both
  import numpy as np
  import scipy
  import math
  import matplotlib.pyplot as plt
  from scipy.optimize import curve_fit, leastsq

  <<IvsV>>
  <<test-func>>

  xdata = np.linspace(-10, 10, 200)
  temp = test_func(xdata, 1, 1.2)
  ydata = temp + 0.25*np.random.normal(size=len(temp))

  err = math.sqrt(len(xdata))
  popt, pcov = curve_fit(test_func, xdata, ydata, [1,1], err)

  plt.ylabel('Corriente (A)', fontsize = 16)
  plt.xlabel('Voltage (V)', fontsize = 6)
  plt.xlim(0,4.1)
  # plot the data as red circles with vertical errorbars
  plt.errorbar(xdata, ydata, fmt = 'ro', yerr = 0.2)
  # now plot the best fit curve and also +- 1 sigma curves
  # (the square root of the diagonal covariance matrix
  # element is the uncertianty on the fit parameter.)
  sigma = [
      pcov[0, 0],
      pcov[1, 1],
  ]

  plt.plot(
      xdata, test_func(xdata, popt[0], popt[1]),
      xdata, test_func(xdata, popt[0] + sigma[0], popt[1] - sigma[1]),
      xdata, test_func(xdata, popt[0] - sigma[0], popt[1] + sigma[1]),
  )
  # save plot to a file
  plt.savefig('img/dataFitted.png', bbox_inches=0)
  return 'img/dataFitted.png'
#+end_src



** Le Data 1

#+tblname: le_data
| Voltage | Current |  Power | Efficiency |
|---------+---------+--------+------------|
|       0 |     1.5 |     0. |         0. |
|    0.27 |    1.53 | 0.4131 |  7.4432432 |
|    0.27 |    1.40 |  0.378 |  6.8108108 |
|    0.36 |    1.12 | 0.4032 |  7.2648649 |
|    0.37 |    1.11 | 0.4107 |        7.4 |
|    0.38 |    0.98 | 0.3724 |  6.7099099 |
|    0.38 |    0.88 | 0.3344 |  6.0252252 |
|    0.39 |    0.74 | 0.2886 |        5.2 |
|    0.40 |    0.64 |  0.256 |  4.6126126 |
|    0.40 |    0.60 |   0.24 |  4.3243243 |
|    0.40 |    0.63 |  0.252 |  4.5405405 |
|    0.41 |    0.57 | 0.2337 |  4.2108108 |
|    0.42 |     0.0 |     0. |         0. |
#+TBLFM: $3=$2*$1
#+TBLFM: $4=($3/5.55 )*100.00

#+begin_src python :noweb-ref smart_plot
  import matplotlib.pyplot as plt

  def smart_plot(x, y, le_filename, title='default'):
      plt.title(title)
      plt.ylabel('Corriente (A)', fontsize = 16)
      plt.xlabel('Voltage (V)', fontsize = 6)
      fig=plt.figure(figsize=(4,2))
      plt.plot(x,y)
      fig.tight_layout()
      filepath = 'img/' + le_filename + '.png'
      plt.savefig(filepath)
      return filepath
#+end_src

#+name: IvsV
#+begin_src python :noweb yes :var data=le_data :results file :exports both
  <<smart_plot>>
  import numpy as np
  data = np.array(data)
  x = data[:, 0]
  y = data[:, 1]
  le_filename = "IvsV"
  return smart_plot(x, y, le_filename)
#+end_src

#+RESULTS: IvsV
[[file:img/IvsV.png]]




#+name; PvsV
#+begin_src python :noweb yes :var data=le_data :results file :exports both
  <<smart_plot>>
  import numpy as np
  data = np.array(data)
  x = data[:, 0]
  y = data[:, 2]
  le_filename = "PvsV"
  return smart_plot(x, y, le_filename)
#+end_src

#+RESULTS:
[[file:img/PvsV.png]]


** Le Data 2

#+tblname: le_data2
| Voltage | Current |    Power | Relative Efficiency |
|---------+---------+----------+---------------------|
|       0 |   1.348 |       0. |                  0. |
|   0.146 |   1.310 |  0.19126 |           3.4461261 |
|   0.258 |     1.3 |   0.3354 |           6.0432432 |
|   0.274 |   1.235 |  0.33839 |           6.0971171 |
|   0.320 |   1.212 |  0.38784 |           6.9881081 |
|   0.345 |   1.075 | 0.370875 |           6.6824324 |
|   0.356 |   0.956 | 0.340336 |           6.1321802 |
|   0.365 |   0.866 |  0.31609 |           5.6953153 |
|   0.373 |   0.790 |  0.29467 |           5.3093694 |
|   0.378 |   0.724 | 0.273672 |           4.9310270 |
|   0.383 |   0.668 | 0.255844 |           4.6098018 |
|   0.387 |   0.619 | 0.239553 |           4.3162703 |
|   0.390 |   0.581 |  0.22659 |           4.0827027 |
|   0.393 |   0.544 | 0.213792 |           3.8521081 |
|   0.395 |   0.511 | 0.201845 |           3.6368468 |
|   0.398 |   0.466 | 0.185468 |           3.3417658 |
|   0.399 |   0.441 | 0.175959 |           3.1704324 |
|   0.420 |       0 |       0. |                  0. |
#+TBLFM: $3=$2*$1
#+TBLFM: $4=($3/5.55 )*100.00

#+name: IvsV2
#+begin_src python :noweb yes :var data=le_data2 :results file :exports both
  <<smart_plot>>
  import numpy as np
  data = np.array(data)
  x = data[:, 0]
  y = data[:, 1]
  le_filename = "IvsV_2"
  return smart_plot(x, y, le_filename)
#+end_src

#+RESULTS: IvsV2
[[file:img/IvsV_2.png]]





#+name: PvsV2
#+begin_src python :noweb yes :var data=le_data2 :results file :exports both
  <<smart_plot>>
  import numpy as np
  data = np.array(data)
  x = data[:, 0]
  y = data[:, 2]
  le_filename = "PvsV_2"
  return smart_plot(x, y, le_filename)
#+end_src

#+RESULTS: PvsV2
[[file:img/PvsV_2.png]]

